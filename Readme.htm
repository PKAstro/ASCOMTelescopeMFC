<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <meta http-equiv="Content-Style-Type" content="text/css">
  <title></title>
  <meta name="Generator" content="Cocoa HTML Writer">
  <meta name="CocoaVersion" content="1404.46">
  <style type="text/css">
    p.p1 {margin: 0.0px 0.0px 16.0px 0.0px; line-height: 25.6px; font: 18.0px 'Helvetica Neue'; color: #333333; -webkit-text-stroke: #333333}
    p.p2 {margin: 0.0px 0.0px 16.0px 0.0px; line-height: 25.6px; font: 16.0px 'Helvetica Neue'; color: #323333; -webkit-text-stroke: #323333}
    p.p3 {margin: 0.0px 0.0px 16.0px 0.0px; line-height: 25.6px; font: 16.0px 'Helvetica Neue'; color: #333333; -webkit-text-stroke: #333333}
    p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; line-height: 25.6px; font: 16.0px 'Helvetica Neue'; color: #333333; -webkit-text-stroke: #333333}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; line-height: 25.6px; font: 18.0px 'Helvetica Neue'; color: #333333; -webkit-text-stroke: #333333}
    p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; line-height: 25.6px; font: 16.0px 'Helvetica Neue'; color: #333333; -webkit-text-stroke: #333333; min-height: 18.0px}
    p.p7 {margin: 0.0px 0.0px 0.0px 0.0px; font: 16.0px 'Helvetica Neue'; color: #333333; -webkit-text-stroke: #333333; min-height: 18.0px}
    p.p8 {margin: 0.0px 0.0px 0.0px 0.0px; font: 14.0px Consolas; color: #323333}
    p.p9 {margin: 0.0px 0.0px 0.0px 0.0px; font: 14.0px Consolas; color: #323333; min-height: 16.0px}
    p.p10 {margin: 0.0px 0.0px 0.0px 0.0px; font: 14.0px Consolas; color: #183691}
    p.p11 {margin: 0.0px 0.0px 0.0px 0.0px; font: 14.0px Consolas; color: #0086b3}
    p.p12 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Helvetica; color: #333333; -webkit-text-stroke: #333333; min-height: 16.0px}
    p.p13 {margin: 0.0px 0.0px 0.0px 0.0px; font: 14.0px Consolas; color: #795da3; -webkit-text-stroke: #795da3}
    p.p14 {margin: 0.0px 0.0px 0.0px 0.0px; font: 14.0px Consolas; color: #323333; -webkit-text-stroke: #323333}
    p.p15 {margin: 0.0px 0.0px 0.0px 0.0px; font: 14.0px Consolas; color: #0086b3; -webkit-text-stroke: #323333}
    p.p16 {margin: 0.0px 0.0px 0.0px 0.0px; font: 14.0px Consolas; color: #323333; -webkit-text-stroke: #323333; min-height: 16.0px}
    p.p17 {margin: 0.0px 0.0px 0.0px 0.0px; line-height: 25.6px; font: 14.0px 'Helvetica Neue'; color: #333333; -webkit-text-stroke: #333333; min-height: 16.0px}
    p.p18 {margin: 0.0px 0.0px 0.0px 0.0px; font: 14.0px Consolas}
    p.p19 {margin: 0.0px 0.0px 0.0px 0.0px; font: 14.0px Consolas; color: #84219c}
    span.s1 {font-kerning: none}
    span.s2 {font-kerning: none; color: #323333}
    span.s3 {font-kerning: none; color: #a71d5d}
    span.s4 {font-kerning: none; color: #0086b3}
    span.s5 {font-kerning: none; color: #000000}
    span.s6 {font-kerning: none; color: #183691}
    span.s7 {font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333}
    span.s8 {font-kerning: none; color: #a71d5d; -webkit-text-stroke: 0px #a71d5d}
    span.s9 {font-kerning: none; color: #ed6a43; -webkit-text-stroke: 0px #ed6a43}
    span.s10 {color: #33a2bd}
    span.s11 {color: #000000}
    span.s12 {background-color: #fffb00}
    span.s13 {color: #000000; background-color: #fffb00}
    span.s14 {color: #b4261a; background-color: #fffb00}
    span.s15 {color: #84219c}
    span.s16 {color: #3c6162}
    span.s17 {color: #0433ff}
    span.Apple-tab-span {white-space:pre}
  </style>
</head>
<body>
<p class="p1"><span class="s1"><b>ASCOM Telescope v3 sample app in C++/MFC, VS2013</b></span></p>
<p class="p2"><span class="s1">by Paul Kanevsky</span></p>
<p class="p3"><span class="s1">Simple example showing how to use C++/MFC to connect to an ASCOM Telescope driver. Includes chooser, connect/disconnect, RA/DEC display and RA Tracking rates list.</span></p>
<p class="p3"><span class="s1">Contains convfiguration for 32- and 64-bit versions.</span></p>
<p class="p3"><span class="s1">Feel free to modify/add/enhance in any way you see fit.</span></p>
<p class="p4"><span class="s1">—————————</span></p>
<p class="p5"><span class="s1"><b>Usage Notes</b></span></p>
<p class="p6"><span class="s1"></span><br></p>
<p class="p4"><span class="s1">If you are building an ITelescope v3 app, I suggest you simply copy the following .h files into your own project, instead of trying to generate them using MFC Class Wizard. These have been modified from their original form to ensure that this works properly with drivers that have different DISPIDs:</span></p>
<p class="p6"><span class="s1"></span><br></p>
<p class="p4"><span class="s1">CAxisRates.h</span></p>
<p class="p4"><span class="s1">Chooser.h</span></p>
<p class="p4"><span class="s1">CRate.h</span></p>
<p class="p4"><span class="s1">CTelescopeV3.h</span></p>
<p class="p4"><span class="s1">CTrackingRates.h</span></p>
<p class="p6"><span class="s1"></span><br></p>
<p class="p4"><span class="s1">You can then start using these classes directly in your own app. See ASCOMTeleDlg.cpp file for example:</span></p>
<p class="p7"><span class="s1"></span><br></p>
<p class="p8"><span class="s1"><span class="Apple-tab-span">	</span>CChooser<span class="Apple-converted-space">  </span>ch;</span></p>
<p class="p8"><span class="s1"><span class="Apple-tab-span">	</span>COleException err;</span></p>
<p class="p9"><span class="s1"></span><br></p>
<p class="p10"><span class="s2"><span class="Apple-tab-span">	</span></span><span class="s3">if</span><span class="s2"> (!ch.</span><span class="s4">CreateDispatch</span><span class="s2">(L</span><span class="s1">"ASCOM.Utilities.Chooser"</span><span class="s2">, &amp;err)) return;</span><span class="s5"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span></span></p>
<p class="p11"><span class="s2"><span class="Apple-tab-span">	</span>ch.</span><span class="s1">put_DeviceType</span><span class="s2">(L</span><span class="s6">"Telescope"</span><span class="s2">);</span></p>
<p class="p8"><span class="s1"><span class="Apple-tab-span">	</span>CString s =<span class="Apple-converted-space">  </span>ch.</span><span class="s4">Choose</span><span class="s1">(m_sTelescopeID);</span></p>
<p class="p12"><span class="s1"></span><br></p>
<p class="p4"><span class="s1">For those who want to start from scratch or to use other ASCOM interfaces, here are the critical steps needed to re-create this sample app:</span></p>
<p class="p6"><span class="s1"></span><br></p>
<p class="p4"><span class="s1">1. Create an MFC project</span></p>
<p class="p4"><span class="s1">2. Add /clr option to support Common Language Runtime (under project Configuration Properties)</span></p>
<p class="p4"><span class="s1">3. Invoke MFC Class Wizard to add new class (Project-&gt;Add Class menu)</span></p>
<p class="p4"><span class="s1">4. Select MFC Class From TypeLib</span></p>
<p class="p4"><span class="s1">5. Select From File, and click on … to browse file system</span></p>
<p class="p4"><span class="s1">6. Navigate to C:\Windows\assembly\GAC_MSIL\ASCOM.DeviceInterfaces and select the folder in there that starts with your platform version (6.0.0.xxxx)</span></p>
<p class="p4"><span class="s1">7. Select ASCOM.DeviceInterfaces.tlb file in that folder</span></p>
<p class="p4"><span class="s1">8. Now choose the interfaces you want to add to your project from the left panel, and add them to the right panel using the ‘&gt;’ or ‘&gt;&gt;’ button</span></p>
<p class="p4"><span class="s1">9. Confirm. This will add automatically generated .h files for all the classes you wanted to add.</span></p>
<p class="p6"><span class="s1"></span><br></p>
<p class="p4"><span class="s1">Now, the fun part is to edit the .h files to ensure that the DISPIDs used for all the methods and properties are not hard-coded. To do this, you’ll want to copy and paste my CACHE_DISPID macro definition into each .h file, near the top:</span></p>
<p class="p6"><span class="s1"></span><br></p>
<p class="p13"><span class="s7">#</span><span class="s8">define</span><span class="s7"> </span><span class="s1">CACHE_DISPID</span><span class="s7">(</span><span class="s9">name</span><span class="s7">) \</span></p>
<p class="p14"><span class="s3"><span class="Apple-tab-span">	</span>static</span><span class="s1"> DISPID id;\</span></p>
<p class="p14"><span class="s1"><span class="Apple-tab-span">	</span></span><span class="s3">if</span><span class="s1"> (id == </span><span class="s4">NULL</span><span class="s1">) {\</span></p>
<p class="p14"><span class="s1"><span class="Apple-tab-span">	</span>CString ss = (name);\</span></p>
<p class="p14"><span class="s1"><span class="Apple-tab-span">	</span>BSTR szMember = ss.</span><span class="s4">AllocSysString</span><span class="s1">();\</span></p>
<p class="p14"><span class="s1"><span class="Apple-tab-span">	</span>m_lpDispatch-&gt;</span><span class="s4">GetIDsOfNames</span><span class="s1">(IID_NULL, &amp;szMember, </span><span class="s4">1</span><span class="s1">, LOCALE_USER_DEFAULT, &amp;id);\</span></p>
<p class="p15"><span class="s2"><span class="Apple-tab-span">	</span></span><span class="s1">SysFreeString</span><span class="s2">(szMember);\</span></p>
<p class="p14"><span class="s1"><span class="Apple-tab-span">	</span>}</span></p>
<p class="p16"><span class="s1"></span><br></p>
<p class="p4"><span class="s1">For each COM property or method call in the .h file, you’ll want to use this macro at the beginning of the function, and change InvokeHelper to pass ‘id’ instead of hardcoded DISPID:</span></p>
<p class="p17"><span class="s1"></span><br></p>
<p class="p18"><span class="Apple-tab-span">	</span><span class="s10">BOOL</span> get_Connected()</p>
<p class="p18"><span class="Apple-tab-span">	</span>{</p>
<p class="p19"><span class="s11"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span></span><span class="s12">CACHE_DISPID</span><span class="s13">(L</span><span class="s14">"Connected"</span><span class="s13">);</span></p>
<p class="p18"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="s10">BOOL</span> result;</p>
<p class="p18"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span>InvokeHelper(<span class="s12">id</span>, <span class="s15">DISPATCH_PROPERTYGET</span>, <span class="s16">VT_BOOL</span>, (<span class="s17">void</span>*)&amp;result, <span class="s15">NULL</span>);</p>
<p class="p18"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span><span class="s17">return</span> result;</p>
<p class="p18"><span class="Apple-tab-span">	</span>}</p>
<p class="p6"><span class="s1"></span><br></p>
<p class="p4"><span class="s1">That’s it! You may want to comment out the #import directive near the top of the .h file(s) to stop MFC from re-generating the include file, as this will overwrite the changes you just made above.</span></p>
<p class="p6"><span class="s1"></span><br></p>
<p class="p6"><span class="s1"></span><br></p>
</body>
</html>
